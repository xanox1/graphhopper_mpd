---
name: Test Live Deployment

# This workflow tests the actual live server after deployment to the docker host
# It focuses on external endpoint testing and docker log testing
on:
  workflow_run:
    workflows: ["Deploy to Docker Host"]
    types:
      - completed
    branches: [master]
  workflow_dispatch:
    inputs:
      docker_host:
        description: 'Docker host to test (uses secret if not provided)'
        required: false
        type: string
      test_endpoint:
        description: 'External endpoint to test (e.g., https://graphhopper.xanox.org)'
        required: false
        type: string

jobs:
  test-live-deployment:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    # Only run if the deployment workflow completed successfully
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          echo "Setting up test environment variables"
          echo "TEST_HOST=${{ github.event.inputs.docker_host || secrets.DOCKER_HOST }}" >> $GITHUB_ENV
          echo "TEST_ENDPOINT=${{ github.event.inputs.test_endpoint }}" >> $GITHUB_ENV

      - name: Test External Endpoint (if provided)
        if: github.event.inputs.test_endpoint != ''
        run: |
          echo "Testing external endpoint: ${{ github.event.inputs.test_endpoint }}"
          
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y jq curl
          
          # Test external endpoint health
          ENDPOINT="${{ github.event.inputs.test_endpoint }}"
          
          echo "Testing health endpoint..."
          if curl -f -s --max-time 10 "${ENDPOINT}/health"; then
            echo "✅ Health endpoint responding"
          else
            echo "❌ Health endpoint failed"
            exit 1
          fi
          
          echo "Testing info endpoint..."
          if INFO_RESPONSE=$(curl -f -s --max-time 10 "${ENDPOINT}/info"); then
            echo "✅ Info endpoint responding"
            echo "GraphHopper version: $(echo "$INFO_RESPONSE" | jq -r '.version // "unknown"')"
            
            # Verify API is working
            if echo "$INFO_RESPONSE" | jq -e '.profiles' >/dev/null 2>&1; then
              echo "✅ API responding correctly"
            else
              echo "❌ API response invalid"
              exit 1
            fi
          else
            echo "❌ Info endpoint failed"
            exit 1
          fi

      - name: Wait for deployment to settle
        if: github.event_name == 'workflow_run'
        run: |
          echo "Waiting 30 seconds for deployment to settle..."
          sleep 30

      - name: Test Live Server Deployment
        if: github.event.inputs.test_endpoint == ''
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.TEST_HOST }}
          username: ${{ secrets.DOCKER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            #!/bin/bash
            set -euo pipefail
            
            # Colors for output
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            NC='\033[0m'
            
            # Configuration
            CONTAINER_NAME="graphhopper"
            SERVER_PORT="8989"
            
            print_status() {
                local color=$1
                local message=$2
                echo -e "${color}[$(date '+%Y-%m-%d %H:%M:%S')] ${message}${NC}"
            }
            
            print_status $YELLOW "=== Testing Live GraphHopper Deployment ==="
            
            # 1. Check container status and logs
            print_status $YELLOW "1. Checking container status..."
            if docker ps --filter name=$CONTAINER_NAME --format "table {{.Names}}\t{{.Status}}" | grep -q $CONTAINER_NAME; then
                print_status $GREEN "✅ Container '$CONTAINER_NAME' is running"
            else
                print_status $RED "❌ Container '$CONTAINER_NAME' is not running"
                exit 1
            fi
            
            # 2. Check docker logs for service status
            print_status $YELLOW "2. Checking docker logs for service status..."
            
            # Check for successful startup message
            if docker logs $CONTAINER_NAME 2>&1 | grep -q "Started Server"; then
                print_status $GREEN "✅ GraphHopper service started successfully"
            else
                print_status $RED "❌ GraphHopper service startup not confirmed"
                print_status $YELLOW "Recent logs:"
                docker logs $CONTAINER_NAME --tail 20
                exit 1
            fi
            
            # Check for critical errors in logs
            if docker logs $CONTAINER_NAME --tail 50 2>&1 | grep -i "error\|exception\|failed" | grep -v "WARN" | head -5; then
                print_status $YELLOW "⚠️ Found error messages in logs (showing first 5):"
                docker logs $CONTAINER_NAME --tail 50 2>&1 | grep -i "error\|exception\|failed" | grep -v "WARN" | head -5
            else
                print_status $GREEN "✅ No critical errors in recent logs"
            fi
            
            # 3. Test external endpoint functionality
            print_status $YELLOW "3. Testing API endpoints..."
            
            # Test health endpoint
            if curl -f -s --max-time 10 http://localhost:${SERVER_PORT}/health > /dev/null; then
                HEALTH_RESPONSE=$(curl -s --max-time 10 http://localhost:${SERVER_PORT}/health)
                print_status $GREEN "✅ Health endpoint responding: $HEALTH_RESPONSE"
            else
                print_status $RED "❌ Health endpoint failed"
                exit 1
            fi
            
            # Test info endpoint for correct API response
            if INFO_RESPONSE=$(curl -f -s --max-time 15 http://localhost:${SERVER_PORT}/info); then
                if echo "$INFO_RESPONSE" | jq . >/dev/null 2>&1; then
                    VERSION=$(echo "$INFO_RESPONSE" | jq -r '.version // "unknown"')
                    print_status $GREEN "✅ Info endpoint responding correctly"
                    print_status $GREEN "   GraphHopper version: $VERSION"
                    
                    # Verify API response structure
                    if echo "$INFO_RESPONSE" | jq -e '.profiles' >/dev/null 2>&1; then
                        print_status $GREEN "✅ API response structure is correct"
                    else
                        print_status $RED "❌ API response missing expected data"
                        exit 1
                    fi
                else
                    print_status $RED "❌ Info endpoint returned invalid JSON"
                    exit 1
                fi
            else
                print_status $RED "❌ Info endpoint failed"
                exit 1
            fi
            
            # 4. Final summary
            print_status $GREEN "=== Test Summary ==="
            print_status $GREEN "✅ Container is running"
            print_status $GREEN "✅ GraphHopper service is active"
            print_status $GREEN "✅ Docker logs show healthy status"
            print_status $GREEN "✅ External endpoints responding correctly"
            print_status $GREEN "✅ API responses are valid"
            
            print_status $GREEN "🎉 Live deployment test PASSED!"

      - name: Report test results
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Live deployment tests completed successfully"
            if [ -n "${{ github.event.inputs.test_endpoint }}" ]; then
              echo "External GraphHopper endpoint at ${{ github.event.inputs.test_endpoint }} is responding correctly"
            else
              echo "Deployed GraphHopper server is working correctly"
            fi
          else
            echo "❌ Live deployment tests failed"
            echo "Check the test output above for detailed error information"
            exit 1
          fi