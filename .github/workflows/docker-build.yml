name: Build and Push Docker Container

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  pull_request_target:
    types: [closed]
    branches: [master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build:
    runs-on: ubuntu-latest
    # Only run on pushes to master, or when PRs are merged to master
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request_target' &&
       github.event.pull_request.merged == true) ||
      github.event_name == 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up environment and security context
        run: |
          echo "Setting up Docker build environment"
          echo "REGISTRY=${{ env.REGISTRY }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
          echo "Configuring network settings for Docker operations"
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # For pull_request_target, checkout the merge commit
          ref: |
            ${{
              github.event_name == 'pull_request_target' &&
              github.event.pull_request.merge_commit_sha || github.sha
            }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven artifacts
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache node
        uses: actions/cache@v4
        with:
          path: web-bundle/node
          key: ${{ runner.os }}-node-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: web-bundle/node_modules
          key: |
            ${{ runner.os }}-node-${{
              hashFiles('**/pom.xml', '**/package.json')
            }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        # Push images only on master branch pushes or merged PRs
        if: |
          github.event_name == 'push' ||
          (github.event_name == 'pull_request_target' &&
           github.event.pull_request.merged == true)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=master-,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-,enable=${{
              github.event_name != 'pull_request_target'
            }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=GraphHopper
            org.opencontainers.image.description=GraphHopper routing engine
            org.opencontainers.image.vendor=GraphHopper

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          # Push only on master branch pushes or merged PRs
          push: |
            ${{
              github.event_name == 'push' ||
              (github.event_name == 'pull_request_target' &&
               github.event.pull_request.merged == true)
            }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
